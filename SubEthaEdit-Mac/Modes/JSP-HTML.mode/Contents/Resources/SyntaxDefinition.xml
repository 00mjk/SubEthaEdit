<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
    <head>
        <name>JSP-HTML</name> <!-- The definitions title -->
        <charsintokens><![CDATA[$_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<>]]></charsintokens> <!-- Valid Characters for Variables -->
    </head>

    <states>
    
        <default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" usespellchecking="yes">
            <import mode="XML" keywords-only="yes"/>
        
		<state id="JSP Comment" type="comment" background-color="none" scope="comment.block.jsp">
			<begin><regex>&lt;\%--</regex><autoend>--\%></autoend></begin>
			<end><regex>--\%></regex></end>
		</state>
        
		<state id="JSP Directives" foldable="no" scope="meta.block">
			<begin><regex>(?:&lt;%@)</regex><autoend>%></autoend></begin>
			<end><regex>(?:%>)</regex></end>
			
			<keywords id="JSP Directive Delimiter" useforautocomplete="no" scope="markup.processing.languageswitch.jsp">
				<regex>(&lt;%[=!@]?)</regex>
				<regex>(%>)</regex>
			</keywords>
			<keywords id="JSP Directive Type" useforautocomplete="no" scope="keyword.type">
				<regex>&lt;%@\s*(\w+)</regex>
			</keywords>
<!-- 			<keywords id="JSP Directive attribute name" useforautocomplete="no" scope="markup.tag.attribute.name">
				<regex>(\w+)=</regex>
			</keywords>
 -->
			<state-link mode="Java" state="Strings"/>
		</state>

		<state id="Java" usesymbolsfrommode="Java" useautocompletefrommode="Java" foldable="yes" scope="meta.block">
			<begin><regex>(?:&lt;%=?)</regex><autoend>%></autoend></begin>
			<end><regex>(?:%>)</regex></end>
				
			<keywords id="JSP Delimiter" useforautocomplete="no" scope="markup.processing.languageswitch.jsp">
				<regex>(&lt;%[=!@]?)</regex>
				<regex>(%>)</regex>
			</keywords>
			
			<import mode="Java" keywords-only="yes" />
			<state-link mode="Java" state="Characters"/>
			<state-link mode="Java" state="JavadocComment"/>
			<state-link mode="Java" state="Comment"/>
			<state-link mode="Java" state="SingleComment"/>
			<state-link mode="Java" state="Strings"/>
            <state id="Java Block" foldable="yes">
                <begin><regex>(?:(?&lt;=\s)(?:if|else|else\s+if|for|while|do|switch|case)\s*(?:\([^#{\n\r]*?\))?)?\s*{</regex><autoend>}</autoend></begin>
                <end><regex>(?:}|[^\n\r](?=\s*[\n\r]?%>))</regex></end>
				<import mode="Java" keywords-only="yes" />
                <import state="Java" />
            </state>
		</state>
	
		
            <!--  This is the "we do a complete HTML mode and import Java everywhere" section -->
			<state id="Comment" type="comment" scope="markup.comment">
				<begin><regex>&lt;!--</regex><autoend>--></autoend></begin>
				<end><regex>--></regex></end>
				<keywords id="SGML Double Dash" useforautocomplete="no" scope="meta.invalid.sgmlcomment">
					<regex>(?&lt;!\!)(--)(?!>)</regex>
				</keywords>
				<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
				<state-link state="Java"/>
            </state>
			<state id="CDATA" foldable="yes" scope="markup.inline.cdata">
				<begin>
					<regex>&lt;!\s*\[CDATA\s*\[</regex>
					<autoend>\]\]></autoend>
				</begin>
				<end>
					<regex>\]\s*\]\s*></regex>
				</end>
                <state-link state="Java"/>
            </state>
			 <state id="Doctype" foldable="no" scope="markup.declaration">
                <begin>
                    <regex>&lt;!</regex><autoend>></autoend>
                </begin>
                <end>
                    <regex>></regex>
                </end>
				<state id="String" type="string" scope="markup.declaration.string.double">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					<state-link state="Java"/>
				</state>
				<state id="SingleString" type="string" scope="markup.declaration.string.single">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					<state-link state="Java"/>
				</state>
				<state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.square">
					<begin><regex>\[</regex><autoend>\]</autoend></begin>
					<end><regex>]</regex></end>
					<import />
				</state>
			   <state-link state="Java"/>
            </state>
         <state id="Escape" foldable="no" scope="markup.processing">
                <begin>
                    <regex>&lt;\?</regex><autoend>\?></autoend>
                </begin>
                <end>
                    <regex>\?></regex>
                </end>
				<state id="ProcessingString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
                   <state-link state="Java"/>
				</state>
				<state id="ProcessingSingleString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
                   <state-link state="Java"/>
				</state>
                   <state-link state="Java"/>
            </state>
            <state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
                <begin>
                    <regex>&lt;[ \t]*(?i)style[^>]*></regex>
                    <autoend>&lt;/style></autoend>
                </begin>
                <end>
                    <regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
                </end>
                <state-link state="Java"/>

                <import mode="CSS"/>
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
						<import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
					   <import mode="CSS" state="Attribute state" keywords-only="yes"/>
						<state-link state="Java"/>
						<state-link state="CSSAutodocComment"/>
						<state-link state="CSSComment"/>
						<state-link state="CSSString"/>
						<state-link state="CSSSingleString"/>
					</state>
					<state-link state="CSSAutodocComment"/>
					<state-link state="CSSComment"/>
					<state-link state="CSSString"/>
					<state-link state="CSSSingleString"/>
					<state-link state="Java"/>
				</state>

                <import keywords-only="yes"/>

				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>
				
				<state id="CSSAutodocComment" type="comment" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Java"/>
				</state>
				<state id="CSSComment" type="comment" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Java"/>
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Java"/>
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Java"/>
				</state>

            </state>


            <state id="Inline Javascript" usesymbolsfrommode="Javascript" useautocompletefrommode="Javascript" foldable="yes" scope="meta.block.js">
                <begin>
                    <regex>&lt;(?i)script[^>]*></regex><autoend>&lt;/script></autoend>
                </begin>
                <end>
                    <regex>&lt;(?i)/script[^>]*></regex>
                </end>
                <import mode="Javascript" keywords-only="yes"/>
                <import mode="XML" keywords-only="yes"/>
                <state-link state="Java"/>

				<state id="JSAutodocComment" type="comment" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
                    <state-link state="Java"/>
				</state>
		
				<state id="JSComment" type="comment" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
                    <state-link state="Java"/>
				</state>
				
				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|.(?=&lt;(?i)/script\s*>)</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
                    <state-link state="Java"/>
				</state>
				
				<state id="JSRegular Expressions" type="string" scope="string.regexp.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
                    <state-link state="Java"/>
				</state>
		
				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
                    <state-link state="Java"/>
				</state>
		
				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
                    <state-link state="Java"/>
				</state>
	
				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
                    <import mode="Javascript" keywords-only="yes"/>
                    <import mode="JSP-HTML" state="Inline Javascript"/>
				</state>
			</state>            

            <state id="Single Tag with JSP State" foldable="no">
                <begin>
                    <regex>&lt;\s*[^/?!][-:_\w]*(?=[^&lt;>]*&lt;%.+%>[^>]*[^>]*/>)</regex>
                </begin>
                <end>
                    <regex>/[ \t]*></regex>
                </end>
                <import/>
                <keywords id="Single Tags with JSP" useforautocomplete="no" scope="markup.tag">
                    <regex>(&lt;[^>]*)</regex>
                    <regex>(\A[^&lt;>]*>)</regex>
                </keywords>
                <keywords id="Attributes in Single Tags with JSP" useforautocomplete="no"  scope="markup.tag.attribute.name">
                    <regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
                </keywords>
                <keywords id="Strings in Single Tags with JSP" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
                    <regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
                    <regex>([^"]*")(?=[ \t]*>)</regex>
                </keywords>
            </state>

            <state id="Tag with JSP State" foldable="yes" scope="meta.block.tag.erb.no-content">
                <begin>
                    <regex>&lt;\s*(?'jsptagstatename'[^/?!][-:_\w]*)(?'trimmedstart'[^&lt;>]*&lt;%.+%>[^>]*>)</regex> <!--  Used "trimmedstart regex group, to start searching earlier" -->
					<autoend>&lt;/\g&lt;jsptagstatename>></autoend>
                </begin>
                <end>
                    <regex>&lt;\s*/\s*(?#see-insert-start-group:jsptagstatename)\s*></regex>
                </end>
                <import/>
                <keywords id="Tags with JSP" useforautocomplete="no" scope="meta.default">
                    <regex>(&lt;[^>]*>?)</regex>
                    <regex>(\A[^&lt;>]*>)</regex>
                </keywords>
                <keywords id="Attributes in Tags with JSP" useforautocomplete="no" scope="markup.tag.attribute.name">
                    <regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
                </keywords>
                <keywords id="Strings in Tags with JSP" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
                    <regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
                    <regex>([^"]*")(?=[ \t]*>)</regex>
                </keywords>
            </state>

            <state id="Tag State JSP" foldable="yes" indent="yes" scope="meta.default">
                <begin>
                    <regex>&lt;\s*(?'xmltagstatename'[^/?!][-:_\w]*)\s*(?:[-:_\w]+=(?:"[^"]*"|'[^']*'|\w+)\s*)*\s*></regex>
					<autoend>&lt;/\g&lt;xmltagstatename>></autoend>
                </begin>
                <end>
                    <regex>&lt;\s*/\s*(?#see-insert-start-group:xmltagstatename)\s*></regex>
                </end>
	            <import mode="XML" keywords-only="yes"/>
                <import />
            </state>

		</default>
        
    </states>

</syntax>
