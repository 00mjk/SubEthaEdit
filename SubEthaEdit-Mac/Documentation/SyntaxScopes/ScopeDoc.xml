<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="ScopeDoc.xslt" type="text/xml"?>
<document>
	<scope_area>
		<title>General</title>
			<description>Scopes that may affect all sorts of texts</description>
		<scope_group>
			<scope name="meta.default"></scope>
			<description>Default fallback scope. All scopes fallback on the defaults of this scope. The meta.default scope of the top-level Language Context also defines the base background and foreground color of the document.</description>
		</scope_group>
		<scope_group>
			<scope name="meta.highlight.currentline"></scope>
			<description>style information that can be used to highlight the current line</description>
		</scope_group>
		<scope_group>
			<scope name="meta.invisible.character"></scope>
			<description>Style for inivisble characters if shown (currently only the foreground color is used)</description>
		</scope_group>
		<scope_group>
			<scope name="meta.link"><example>http://apple.com</example><example>www.panic.com</example></scope>
			<scope name="meta.link.email"><example>steve@apple.com</example></scope>
		</scope_group>
	</scope_area>
	<scope_area>
		<title>Programming Languages (c, js, php, ruby)</title>
		<description>Scopes present in Programming languages.</description>
		<scope_group>
			<scope name="comment"></scope>
			<scope name="comment.line"><example lang="c">// comment</example><example lang="sh"># comment</example></scope>
			<scope name="comment.block"><example lang="js">/* Comment */</example></scope>
			<scope name="comment.block.documentation"><example lang="js">/*&quot; Autodoc Comment &quot;*/</example><example lang="c">/** Doxygen Comment **/</example></scope>
			<description>All sorts of comments</description>
		</scope_group>
		<scope_group>
			<scope name="keyword"></scope>
			<scope name="keyword.control"><example lang="js">if</example> <example lang="js">else</example> <example lang="js">class</example> <example lang="js">new</example> <example lang="js">do</example> <example lang="js">while</example></scope>
			<scope name="keyword.type"><example lang="js">byte</example> <example lang="js">float</example> <example lang="js">char</example> <example lang="js">void</example> <example lang="js">double</example></scope>
			<description>Language Keywords</description>
		</scope_group>
		<scope_group>
			<scope name="entity"></scope>
			<scope name="entity.name.function"><example lang="js">my_function_call()</example></scope>
			<description>language constructs like function calls, method calls, </description>
		</scope_group>
		<scope_group>
			<scope name="constant"></scope>
			<scope name="constant.numeric"><example lang="js">0</example> <example lang="c">15</example> <example lang="c">0x4a</example> <example lang="c">0713</example> <example lang="c">3.14</example></scope>
			<scope name="constant.language.literal"><example lang="js">NaN</example> <example lang="js">Infinity</example> <example lang="js">true</example> <example lang="js">false</example></scope>
			<description>Constants and Literals</description>
		</scope_group>
		<scope_group>
			<scope name="string"></scope>
			<scope name="string.quoted.single"><example lang="js">'single'</example></scope>
			<scope name="string.quoted.double"><example lang="js">"double"</example></scope>
			<scope name="string.quoted.double.nsstring"><example lang="objective-c">@"NSString"</example></scope>
			<description>Strings</description>
		</scope_group>
		<scope_group>
			<scope name="support"></scope>
			<scope name="support.class.standard"></scope>
			<description>Standard Framework keywords</description>
		</scope_group>
	</scope_area>
	<scope_area>
		<title>Document Description Languages</title>
		<description>Scopes that represent HTML, css, and other non-programming languages</description>
		<scope_group>
			<scope name="meta.important"><example lang="css">important</example></scope>
			<scope name="style.comment.block"><example lang="css">/* Comment */</example></scope>
			<scope name="style.comment.block.documentation"><example lang="css">/** Documentation Comment **/</example></scope>
			<scope name="style.property.name"><example lang="css">padding</example> <example lang="css">margin</example> <example lang="css">font</example> <example lang="css">display</example> <example lang="css">width</example> <example lang="css">height</example> <example lang="css">border</example></scope>
			<scope name="style.value"></scope>
			<scope name="style.value.string"></scope>
			<scope name="style.value.string.parantheses"><example lang="css">(lorem ipsum)</example></scope>
			<scope name="style.value.string.single"><example lang="css">'lorem ipsum'</example></scope>
			<scope name="style.value.string.double"><example lang="css">"lorem ipsum"</example></scope>
			<scope name="style.value.color.rgb-value"><example lang="css">#fff</example><example lang="css">#0000a1</example><example lang="css">#cbafde</example></scope>
			<scope name="style.value.numeric"><example lang="css">1.4em</example><example lang="css">5px</example><example lang="css">17pt</example><example lang="css">100%</example><example lang="css">30deg</example></scope>
			<scope name="style.value.keyword"><example lang="css">bold</example><example lang="css">linear</example><example lang="css">block</example><example lang="css">none</example><example lang="css">no-repeat</example><example lang="css">monospace</example><example lang="css">pointer</example></scope>
			<scope name="style.at-rule"><example lang="css">@import</example><example lang="css">@media</example></scope>

			<description>Style</description>
		</scope_group>
		<scope_group>
			<scope name="markup.constant.entity"><example lang="xml">&amp;lt;</example><example lang="xml">&amp;#160;</example><example lang="xml">&amp;#x2014;</example></scope>
			<description>constants</description>
		</scope_group>
		<scope_group>
			<scope name="meta.invalid"></scope>
			<scope name="meta.invalid.sgmlcomment"><example lang="xml">--</example></scope>
			<scope name="meta.invalid.ampersand"><example lang="xml">&amp;</example></scope>
			<description>Bad SGML comments, bad Escaping, etc.</description>
		</scope_group>
		<scope_group>
			<scope name="markup.comment"><example lang="xml">&lt;!-- SGML Comment --></example></scope>
			<scope name="markup.inline.cdata"><example lang="xml">&lt;![CDATA[&lt;inline>Data&lt;/inline>]]&gt;</example></scope>
			<scope name="markup.processing"><example lang="xml">&lt;?xml version='1.0' encoding='utf-8'?></example></scope>
			<scope name="markup.tag"><example lang="xml">&lt;document></example><example lang="xml">&lt;br/></example></scope>
			<scope name="markup.tag.attribute.name"><example lang="xml">href</example><example lang="xml">id</example><example lang="xml">class</example></scope>
			<scope name="markup.tag.attribute.value"></scope>
			<scope name="markup.tag.attribute.value.string"><example lang="xml">"left"</example><example lang="xml">"utf-8"</example></scope>
			<scope name="markup.declaration"><example lang="xml">&lt;!DOCTYPE ></example><example lang="xml">&lt;!ENTITY ></example></scope>
			<scope name="markup.declaration.string.double"><example lang="xml">"spec.dtd"</example></scope>
			<scope name="markup.declaration.string.single"><example lang="xml">'&lt;'</example></scope>
			<scope name="markup.processing.attribute.value.string"><example lang="xml">"utf-8"</example><example lang="xml">'no'</example></scope>
			<description>markup </description>
		</scope_group>
	</scope_area>
</document>