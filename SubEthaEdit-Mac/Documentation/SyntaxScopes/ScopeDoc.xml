<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="ScopeDoc.xslt" type="text/xml"?>
<document>
	<scope_area>
		<title>General</title>
		<description>Scopes that may affect all sorts of texts</description>
		<scope_group>
			<scope name="meta.default">
				<example lang="js css html xml">Default Text</example>
			</scope>
			<description>Default fallback scope. All scopes fallback on the defaults of this scope. The meta.default scope of the top-level Language Context also defines the base background and foreground color of the document.</description>
			<scope name="meta.block.interpolation">
				<example lang="ruby">#{some code or variable}</example>
			</scope>
		</scope_group>
		<scope_group>
			<scope name="meta.highlight.currentline">
				<example lang="js css html xml">-</example>
			</scope>
			<description>style information that can be used to highlight the current line</description>
		</scope_group>
		<scope_group>
			<scope name="meta.invisible.character">
				<example lang="js css html xml">Â¶</example>
				<example lang="js css html xml">.</example>
			</scope>
			<description>Style for inivisble characters if shown (currently only the foreground color is used)</description>
		</scope_group>
		<scope_group>
			<scope name="meta.link">
				<example lang="js css html xml">http://apple.com</example>
				<example lang="js css html xml">www.panic.com</example>
			</scope>
			<scope name="meta.link.email">
				<example lang="js css html xml">steve@apple.com</example>
			</scope>
		</scope_group>
	</scope_area>
	<scope_area>
		<title>Programming Languages (c, js, php, ruby)</title>
		<description>Scopes present in programming languages.</description>
		<scope_group>
			<scope name="comment">
				<example lang="coda">// code comment</example>
			</scope>
			<scope name="comment.line">
				<example lang="js c java">// comment</example>
				<example lang="sh ruby"># comment</example>
			</scope>
			<scope name="comment.block">
				<example lang="coda">/* code block comment */</example>
				<example lang="js">/* Comment */</example>
			</scope>
			<scope name="comment.block.documentation">
				<example lang="ruby">=begin =end</example>
				<example lang="js">/*" Autodoc Comment "*/</example>
				<example lang="c java">/** Doxygen Comment **/</example>
			</scope>
			<scope name="comment.block.documentation.tags">
				<example lang="java">/** @return **/</example>
			</scope>
			<description>All sorts of comments</description>
		</scope_group>
		<scope_group>
			<scope name="keyword">
				<example lang="coda">code keywords</example>
			</scope>
			<scope name="keyword.function">
				<example lang="ruby">puts</example>
				<example lang="ruby">scan</example>
				<example lang="ruby">defined?</example>
			</scope>
			<scope name="keyword.class">
				<example lang="ruby">Array</example>
				<example lang="ruby">DateTime</example>
				<example lang="ruby">Hash</example>
			</scope>
			<scope name="keyword.control">
				<example lang="js ruby">if</example>
				<example lang="js">else</example>
				<example lang="js ruby">class</example>
				<example lang="js">new</example>
				<example lang="js ruby">do</example>
				<example lang="js ruby">while</example>
				<example lang="ruby">begin</example>
			</scope>
			<scope name="keyword.type">
				<example lang="coda">code type keywords</example>
				<example lang="js">byte</example>
				<example lang="js">float</example>
				<example lang="ruby">public</example>
				<example lang="js">char</example>
				<example lang="js">void</example>
				<example lang="js">double</example>
			</scope>
			<scope name="keyword.directive">
				<example lang="obj-c obj-j">@implementation</example>
			</scope>
			<description>Language Keywords - also classes and functions if they have a builtin character</description>
		</scope_group>
		<scope_group>
			<scope name="language"/>
			<scope name="language.preprocessor">
				<example lang="c">#include</example>
			</scope>
			<scope name="language.function">
				<example lang="coda">code_functions()</example>
				<example lang="js">my_function_call()</example>
			</scope>
			<scope name="language.method">
				<example lang="obj-c obj-j">[Some selector:with:you:know:]</example>
			</scope>
			<scope name="language.variable">
				<example lang="php">$my_var</example>
			</scope>
			<scope name="language.variable.instance">
				<example lang="ruby">@my_var</example>
			</scope>
			<scope name="language.variable.class">
				<example lang="ruby">@@my_var</example>
			</scope>
			<scope name="language.variable.global.builtin">
				<example lang="ruby">$stdin</example>
				<example lang="ruby">$@</example>
				<example lang="ruby">STDERR</example>
			</scope>
			<description>language constructs like function calls, method calls, etc - variables if recognizable as such</description>
		</scope_group>
		<scope_group>
			<scope name="constant">
				<example lang="coda">code constants</example>
			</scope>
			<scope name="constant.numeric">
				<example lang="js java c ruby">0</example>
				<example lang="js java c">15</example>
				<example lang="js java c ruby">0x4a</example>
				<example lang="js ruby">0713</example>
				<example lang="js java c">3.14</example>
				<example lang="ruby">1.2e-3</example>
				<example lang="ruby">0b01011</example>
			</scope>
			<scope name="constant.numeric.character">
				<example lang="java c obj-c">'c'</example>
				<example lang="ruby">?\n</example>
				<example lang="ruby">?d</example>
				<example lang="ruby">\x4a</example>
			</scope>
			<scope name="constant.numeric.keyword">
				<example lang="js">NaN</example>
				<example lang="js">Infinity</example>
				<example lang="js ruby">true</example>
				<example lang="js ruby">false</example>
				<example lang="ruby">nil</example>
			</scope>
			<description>Constants and Literals</description>
		</scope_group>
		<scope_group>
			<scope name="string">
				<example lang="coda">"code strings"</example>
			</scope>
			<scope name="string.single">
				<example lang="js ruby">'lorem ipsum'</example>
			</scope>
			<scope name="string.double">
				<example lang="js">"lorem ipsum"</example>
			</scope>
			<scope name="string.here-doc">
				<example lang="ruby">&gt;&gt;"html_end"</example>
			</scope>
			<scope name="string.here-doc.indented">
				<example lang="ruby">&gt;&gt;-HEREDOC</example>
			</scope>
			<scope name="string.regex">
				<example lang="coda">/code regex/</example>
				<example lang="ruby">%r([^ a-zA-Z0-9_.-]+)</example>
				<example lang="js ruby">/([^ a-zA-Z0-9_.-]+)/n</example>
			</scope>
			<scope name="string.exec">
				<example lang="ruby">`ls -l`</example>
				<example lang="js ruby">%x{ls -l}</example>
			</scope>
			<scope name="string.symbol">
				<example lang="ruby">:my_symbol!</example>
				<example lang="ruby">:my_symbol!</example>
				<example lang="ruby">%s|my_symbol!|</example>
				<example lang="ruby">:&lt;:my_symbol&gt;</example>
			</scope>
			<scope name="string.here-doc">
				<example lang="php">&lt;&lt;&lt;EOT  something direct EOT;</example>
			</scope>
			<scope name="string.double.nsstring">
				<example lang="objective-c">@"NSIpsum"</example>
			</scope>
			<description>Strings</description>
		</scope_group>
		<scope_group>
			<scope name="support">
				<example lang="coda">code libraries</example>
			</scope>
			<scope name="support.accessor">
				<example lang="ruby">attr_reader</example>
			</scope>
			<scope name="support.function">
				<example lang="php">htmlentities</example>
				<example lang="php">array_splice</example>
			</scope>
			<scope name="support.method.special">
				<example lang="php">__construct</example>
				<example lang="php">__clone</example>
			</scope>
			<scope name="support.class.standard">
				<example lang="js">Object</example>
				<example lang="js">String</example>
				<example lang="js">Array</example>
				<example lang="js">Math</example>
			</scope>
			<description>Standard Framework keywords/classnames/constants</description>
		</scope_group>
	</scope_area>
	<scope_area>
		<title>Document Description Languages</title>
		<description>Scopes that represent HTML, css, and other non-programming languages</description>
		<scope_group>
			<scope name="meta.important">
				<example lang="coda">!important</example>
				<example lang="css">!important</example>
			</scope>
			<scope name="style.comment">
				<example lang="coda">/* CSS comment */</example>
			</scope>
			<scope name="style.comment.block">
				<example lang="css">/* Comment */</example>
			</scope>
			<scope name="style.comment.block.documentation">
				<example lang="css">/** Documentation Comment **/</example>
			</scope>
			<scope name="style.property.name">
				<example lang="coda">CSS properties</example>
				<example lang="css">padding</example>
				<example lang="css">margin</example>
				<example lang="css">font</example>
				<example lang="css">display</example>
				<example lang="css">width</example>
				<example lang="css">height</example>
				<example lang="css">border</example>
			</scope>
			<scope name="style.value">
				<example lang="coda">CSS Values</example>
			</scope>
			<scope name="style.value.string">
				<example lang="coda">"CSS strings"</example>
			</scope>
			<scope name="style.value.string.single">
				<example lang="css">'lorem ipsum'</example>
			</scope>
			<scope name="style.value.string.double">
				<example lang="css">"lorem ipsum"</example>
			</scope>
			<scope name="style.value.color.rgb-value">
				<example lang="coda">CSS colors #fff</example>
				<example lang="css">#fff</example>
				<example lang="css">#0000a1</example>
				<example lang="css">#cbafde</example>
			</scope>
			<scope name="style.value.numeric">
				<example lang="css">1.4em</example>
				<example lang="css">5px</example>
				<example lang="css">17pt</example>
				<example lang="css">100%</example>
				<example lang="css">30deg</example>
			</scope>
			<scope name="style.value.keyword">
				<example lang="css">bold</example>
				<example lang="css">linear</example>
				<example lang="css">block</example>
				<example lang="css">none</example>
				<example lang="css">no-repeat</example>
				<example lang="css">monospace</example>
				<example lang="css">pointer</example>
			</scope>
			<scope name="style.at-rule">
				<example lang="coda">CSS @import @media</example>
				<example lang="css">@import</example>
				<example lang="css">@media</example>
			</scope>
			<description>Style</description>
		</scope_group>
		<scope_group>
			<scope name="markup.constant.entity">
				<example lang="coda">HTML &amp;entities; &amp;lt;</example>
				<example lang="xml html">&amp;lt;</example>
				<example lang="xml html">&amp;#160;</example>
				<example lang="xml html">&amp;#x2014;</example>
			</scope>
			<description>constants</description>
		</scope_group>
		<scope_group>
			<scope name="meta.invalid">
				<example lang="coda">HTML invalid</example>
			</scope>
			<scope name="meta.invalid.sgmlcomment">
				<example lang="xml html">--</example>
			</scope>
			<scope name="meta.invalid.ampersand">
				<example lang="xml html">&amp;</example>
			</scope>
			<description>Bad SGML comments, bad Escaping, etc.</description>
		</scope_group>
		<scope_group>
			<scope name="markup.comment">
				<example lang="xml html coda">&lt;!-- SGML Comment --&gt;</example>
			</scope>
			<scope name="markup.inline.cdata">
				<example lang="xml html coda">&lt;![CDATA[&lt;inline&gt;Data&lt;/inline&gt;]]&gt;</example>
			</scope>
			<scope name="markup.processing">
				<example lang="coda">&lt;?xml html version='1.0' processing instructions ?&gt;</example>
				<example lang="xml html">&lt;?xml html version='1.0' encoding='utf-8'?&gt;</example>
			</scope>
			<scope name="markup.processing.languageswitch">
				<example lang="php">&lt;?php</example>
				<example lang="php">?&gt;</example>
			</scope>
			<scope name="markup.tag">
				<example lang="xml html">&lt;document&gt;</example>
				<example lang="xml html">&lt;br/&gt;</example>
			</scope>
			<scope name="markup.tag.attribute.name">
				<example lang="xml html">href</example>
				<example lang="xml html">id</example>
				<example lang="xml html">class</example>
			</scope>
			<scope name="markup.tag.attribute.value">
				<example lang="coda">"HTML Attribute Values"</example>
			</scope>
			<scope name="markup.tag.attribute.value.string">
				<example lang="xml html">"left"</example>
				<example lang="xml html">"utf-8"</example>
			</scope>
			<scope name="markup.declaration">
				<example lang="coda">&lt;!DOCTYPE &gt;</example>
				<example lang="xml html">&lt;!DOCTYPE &gt;</example>
				<example lang="xml html">&lt;!ENTITY &gt;</example>
			</scope>
			<scope name="markup.declaration.string.double">
				<example lang="xml html">"spec.dtd"</example>
			</scope>
			<scope name="markup.declaration.string.single">
				<example lang="xml html">'&lt;'</example>
			</scope>
			<scope name="markup.processing.attribute.value.string">
				<example lang="xml html">"utf-8"</example>
				<example lang="xml html">'no'</example>
			</scope>
			<description>markup </description>
		</scope_group>
	</scope_area>
</document>