################################################################ // Used in the (so far default) SEE modes

comment 					*//JavadocComment 
comment.block 				// Comment
comment.block.documentation
comment.block.documentation.js
comment.block.documentation.tag
comment.block.js
comment.block.jsp
comment.block.php
comment.block.vb
comment.line				// SingleComment
comment.line.double-dash
comment.line.double-slash
comment.line.double-slash.js
comment.line.number-sign
comment.line.php
comment.line.vb

### keyword marks the inner workings and special words of a language (basics)
keyword						*// Keywords, Predefined Variables
keyword.class				// Classes
keyword.constant		// true, false, undefined, nil, NULL, NaN
keyword.constant.js
keyword.control				*// Control Statements - if else while end
keyword.control.asp
keyword.control.js
keyword.control.vb
++ keyword.control.definition used for: class function keywords
keyword.directive.objj // @public, @private
-- keyword.objective-c
keyword.subroutine // todo: bash: builtin, ruby: part of language : exit
keyword.type				*// Types - int NSObject (only!?)
keyword.type.js
keyword.type.objj
keyword.variable.global // todo: find this for perl (??) and php (GLOBALS)
keyword.vb

### everything language relatedelse basically
language.constant.numeric
language.constant.numeric.character
language.constant.numeric.js
language.constant.numeric.preprocessor // numbers in preprocessor things - C mode
language.operator			*// Operators - +, -,
++ language.operator.special			*// Operators: erlang "language.operator"
language.preprocessor		// Preprocessor --> #import
language.property			*// Properties -> used in coda 2
language.record
language.subroutine.function
++ language.subroutine.function.call
++ language.subroutine.function.definition
language.subroutine.function.js
language.subroutine.function.php
language.subroutine.method
++ language.subroutine.method.call
++ language.subroutine.method.definition
language.subroutine.method.special.php
language.variable
language.variable.class
language.variable.global
language.variable.instance
language.variable.php
language.variable.string // variables in strings!
language.variable.string.php

markup.comment
markup.constant.entity
markup.declaration
markup.declaration.string.double
markup.declaration.string.single
markup.inline.cdata
markup.processing
markup.processing.attribute.value.string
markup.processing.languageswitch
markup.processing.languageswitch.asp
markup.processing.languageswitch.jsp
markup.processing.languageswitch.php
markup.tag
markup.tag.attribute.name
markup.tag.attribute.value.string

// TODO
meta.block					// Block
meta.block.attribute
meta.block.begin
meta.block.create-table
meta.block.css
meta.block.curly
meta.block.curly.js
meta.block.directives
meta.block.interpolation
meta.block.js
meta.block.percentagestring.unescapedbracketrecursive.angle
meta.block.percentagestring.unescapedbracketrecursive.bracket
meta.block.percentagestring.unescapedbracketrecursive.curly
meta.block.percentagestring.unescapedbracketrecursive.parentheses
meta.block.square
meta.block.tag.erb
meta.block.tag.erb.no-content
meta.block.tag.php
meta.block.tag.php.no-content
meta.default				*// Base
meta.important				*//
meta.important.memorymanagement
meta.invalid				*//
meta.invalid.ampersand
meta.invalid.sgmlcomment
meta.link
meta.link.email
meta.link.portion
meta.preprocessor.nowiki
meta.state
meta.tag.erbstart
meta.tag.preprocessor

### string
string.angle
string.array.percent
string.array.percent.angle  // ruby zeichenkette mit leerzeichen nach array
string.array.percent.bracket
string.array.percent.curly
string.array.percent.parentheses
string.double				// Double Quoted String
string.double.js
string.double.nsstring.objj
string.double.openstep
string.double.php
string.double.vb
string.exec.backtick
string.exec.percentx
string.exec.percentx.angle
string.exec.percentx.bracket
string.exec.percentx.curly
string.exec.percentx.parentheses
string.here-doc
string.here-doc.intended
string.here-doc.perl
string.here-doc.php
string.percentage
string.percentage.angle
string.percentage.bracket
string.percentage.curly
string.percentage.parentheses
string.regex
string.regex.js
string.regex.percentage
string.regex.percentage.angle
string.regex.percentage.bracket
string.regex.percentage.curly
string.regex.percentage.parentheses
string.single				// Single Quoted String
string.single.backtick
string.single.js
string.single.php
string.symbol
string.symbol.percent
string.symbol.percent.angle
string.symbol.percent.bracket
string.symbol.percent.curly
string.symbol.percent.parentheses

++ structured.anchor
structured.bold
structured.changes.added
structured.changes.deleted
structured.changes.modified
structured.changes.replaced
structured.changes.revision
structured.changes.user
structured.comment
structured.emphasis
structured.event
structured.footnote
structured.heading
structured.heading
structured.heading.1
structured.heading.2
structured.heading.3
structured.heading.4
structured.heading.5
structured.italic
structured.italicbold
structured.list.numbered
structured.list.unnumbered
structured.math
++ structured.quote
structured.quote.even
structured.quote.odd
structured.raw.code
structured.raw.indented
structured.reference
structured.section
structured.separator.horizontal
structured.separator.vertical
structured.tool-tip
structured.variable

style.at-rule // @screen
style.comment.block
style.comment.block.documentation
style.property.name
style.value.color.rgb-value
style.value.keyword
style.value.numeric
style.value.string.double
style.value.string.single

### language support
support.accessor
support.class
support.class.standard.cocoa
support.class.standard.js
support.class.standard.objj
support.constant //  pi INT_MAX
support.constant.cocoa
support.constant.objj
++ support.subroutine.common(.third-party)
++ support.subroutine.common(.rails)
support.subroutine.function
support.subroutine.function.php
support.subroutine.method
support.subroutine.standard.cocoa
support.type.cocoa

################################################################ // Used in Coda Style Sheets
-comment
-constant.numeric
-constant.numeric.keyword
-keyword
-keyword.control
-keyword.type
-language.function
-language.operator
-language.property
-language.variable
-language.variable.string
-markup.comment
markup.constant.entity
-markup.declaration
-markup.inline.cdata
-markup.processing
-markup.tag
-markup.tag.attribute.name
-markup.tag.attribute.value
markup.tag.framework
-meta.default
meta.highlight.currentline
-meta.important
-meta.invalid
meta.invisible.characters
meta.link
string
string.regex
string.regex.escaped
-style.at-rule
style.comment
-style.property.name
-style.value.color.rgb-value
-style.value.keyword
-style.value.numeric
style.value.string
-support

################################################################ // Questions and TODOS
##### TODO TODO TODO TODO

* check the scopes that include the language ending
* new scopes for keyword.objective-c
* make those structered: Diff, SVNNLog | Markup, Conference | LaTeX | Wiki
* SDEF mode misses SymbolM
* make xml Schema for SyntaxDefinition
* check for background-color:none in SubethaEdit (might be used to reset to the default instead of inheriting from somewhere
* make xslt for inverted stylesheet -> check for autogenerated (implicit) inverted colors
* make stylesheets for langs, normal and inverted-versions
* remove style information from the syntaxdefinitions
* LassoScript <-> CFML -> delete one, which one? because they are almost the same
* libraries? (eg. QuartzCore import?) names? --> evtl autocomplete?
* pretty sure indent="yes|no" is almost never used? --> autoformatierung - return, indent (in coda) -- if else!
* one step tidy xml
* "<!--  This is the "we do a complete HTML mode and import php everywhere" section -->" -> similar comments all over the place - smart thing? ---- compare ERB because this is newer and nicer
* is there a place where â€¦.js -> is that defined somewhere?
* sometimes meta default is used for tag state (or similar) (?) - part of the meta talks

*string.double.openstep?
*string.angle -> meta.state?

*make the localizable strings examples into ScopeDoc.xml examples

* Maybe add localized mode version: Mode and Modus
